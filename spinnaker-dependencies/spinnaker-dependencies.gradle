apply plugin: "java-platform"

javaPlatform {
  allowDependencies()
}

ext {
  versions = [
    arrow            : "0.13.2",
    aws              : "1.12.411",
    bouncycastle     : "1.70",
    brave            : "5.14.1",
    gcp              : "25.3.0",
    jooq             : "3.13.6",
    jsch             : "0.1.54",
    jschAgentProxy   : "0.0.9",
    // spring boot 2.5.14 specifies logback 1.2.11, but a rosco test hung with
    // 1.2.11 from https://jira.qos.ch/browse/LOGBACK-1623 so stick with 1.2.10
    // until 1.2.12 appears.
    logback          : "1.2.10",
    protobuf         : "3.21.12",
    okhttp           : "2.7.5", // CVE-2016-2402
    okhttp3          : "3.14.9",
    openapi          : "1.7.0", // this needs to be kept in sync with spring boot as it pulls in the spring-boot-dependencies BOM
    retrofit         : "1.9.0",
    retrofit2        : "2.8.1",
    spectator        : "1.5.4", //spectator
    spek             : "1.1.5",
    spek2            : "2.0.9",
    springBoot       : "3.0.9",
    springCloud      : "2022.0.2",
    springdocVersion : "2.0.3",

    // Spring boot 2.4.13 brings in 9.0.55.  Spring boot 2.5.14 brings in
    // 9.0.63.  Use 9.0.69 to resolve CVE-2022-42252 and CVE-2022-45143.  Spring
    // boot 2.6.14 and 2.7.6 bring in 9.0.69.
    tomcat           : "9.0.69"
  ]
}

dependencies {
  /*
   * These are 3rd party BOMs we inherit from. Any version constraints they contain we get
   * transitively.
   *
   * Order matters somewhat here in that if multiple BOMs constrain the same things the FIRST wins.
   * For example, `junit-bom` and `jackson-bom` will win out over the versions of JUnit and Jackson
   * specified by `spring-boot-dependencies`.
   */
  // Log4shell safeguard.  Per analysis, log4j-core is not included in dependencies, but this would prevent transitive inclusion of it by extension
  // platforms.   Doing 2.16.0 which completely removes message lookups AND sets jndi to disabled by default
  api(platform("org.apache.logging.log4j:log4j-bom:2.19.0"))//2.16.0

  api(platform("org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.6.4"))//1.4.3
  //kotlinVersion comes from gradle.properties since we have kotlin code in
  // this project and need to configure gradle plugins etc.
  api(platform("org.jetbrains.kotlin:kotlin-bom:$kotlinVersion"))
  api(platform("org.junit:junit-bom:5.9.1"))//5.6.3"))
  api(platform("com.fasterxml.jackson:jackson-bom:2.14.1"))//2.12.7.20221012"))
  api(platform("io.zipkin.brave:brave-bom:${versions.brave}"))
  api(platform("org.springframework.boot:spring-boot-dependencies:${versions.springBoot}"))
  api(platform("com.amazonaws:aws-java-sdk-bom:${versions.aws}"))
  api(platform("com.google.protobuf:protobuf-bom:${versions.protobuf}"))
  api(platform("com.google.cloud:libraries-bom:${versions.gcp}")) {
    exclude group: "google-api-client", module: "google-api-client"
  }
  api(platform("com.google.cloud:google-cloud-secretmanager:2.1.7"))
  api(platform("org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"))
  api(platform("io.strikt:strikt-bom:0.31.0"))
  api(platform("org.spockframework:spock-bom:2.4-M1-groovy-4.0"))//1.3-groovy-2.5
  api(platform("com.oracle.oci.sdk:oci-java-sdk-bom:1.5.17"))
  api(platform("org.testcontainers:testcontainers-bom:1.16.2"))
  api(platform("io.arrow-kt:arrow-stack:${versions.arrow}"))
  api("dev.minutest:minutest:1.13.0")
  api("io.mockk:mockk:1.10.5")
  api("org.spekframework.spek2:spek-dsl-jvm:${versions.spek2}")
  api("org.spekframework.spek2:spek-runner-junit5:${versions.spek2}")
  api("org.jetbrains.spek:spek-junit-platform-engine:${versions.spek}")
  api("cglib:cglib-nodep:3.3.0")
  api("org.objenesis:objenesis:2.5.1")
  api("com.netflix.spectator:spectator-reg-micrometer:${versions.spectator}")
  api("org.junit.jupiter:junit-jupiter-api:5.9.2")
  api("com.amazonaws:aws-java-sdk-sts:${versions.aws}")
  api("com.hubspot.jinjava:jinjava:2.6.0")
  api("redis.clients:jedis:4.3.1")
  api("org.pf4j:pf4j:3.10.0")
  api("com.squareup.okhttp3:mockwebserver:${versions.okhttp3}")
  api("com.squareup.retrofit2:retrofit-mock:${versions.retrofit2}")

  api("org.junit.platform:junit-platform-runner:1.9.2")
  api("org.assertj:assertj-core:3.23.1")
  api("com.amazonaws:aws-java-sdk-sts:1.12.411")
  api("com.jcraft:jsch.agentproxy.jsch:0.0.9")
  api("com.jcraft:jsch.agentproxy.connector-factory:0.0.9")
  api("io.github.resilience4j:resilience4j-all:2.0.0")
  api("commons-io:commons-io:2.11.0")
  api("org.mockito:mockito-all:1.10.19")//parent to org.objenesis:objenesis:2.5.1-->3.2 compatabile with java17

  api("com.netflix.eureka:eureka-client:2.0.0")
  api("com.netflix.spectator:spectator-ext-jvm:1.5.4")
  api("com.github.ben-manes.caffeine:caffeine:3.1.5")
  api("com.netflix.spectator:spectator-ext-gc:1.5.4")

  api("com.netflix.spectator:spectator-api:${versions.spectator}")
  api("com.netflix.spectator:spectator-ext-aws:${versions.spectator}")
  api("com.netflix.spectator:spectator-ext-gc:${versions.spectator}")
  api("com.netflix.spectator:spectator-ext-jvm:${versions.spectator}")
  api("com.netflix.spectator:spectator-nflx-plugin:${versions.spectator}")
  api("com.netflix.spectator:spectator-reg-atlas:${versions.spectator}")
  api("com.netflix.spectator:spectator-web-spring:${versions.spectator}")
  api("com.netflix.spectator:spectator-reg-micrometer:${versions.spectator}")
  api("mysql:mysql-connector-java:8.0.28")

  constraints{
    api("org.yaml:snakeyaml:2.0")
    api("org.postgresql:postgresql:42.7.2")
    api("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.0")
    api("org.liquibase:liquibase-core:4.21.0")
    api("org.json:json:20231013")
    api("org.codehaus.jettison:jettison:1.5.4")
    api ("com.thoughtworks.xstream:xstream:1.4.20")
    api("commons-jxpath:commons-jxpath:1.3")
    api("commons-net:commons-net:3.9.0")
    api("net.minidev:json-smart:2.4.10")
    api("org.jsoup:jsoup:1.15.3")
    api("com.fasterxml.woodstox:woodstox-core:6.4.0")
    api("com.google.oauth-client:google-oauth-client:1.34.1")
    api("com.google.api-client:google-api-client:1.31.1") // TODO: Track update for CVE-2020-7692, reanalysis pending.
    api("cglib:cglib-nodep:3.3.0")
    api("com.jcraft:jsch.agentproxy.connector-factory:${versions.jschAgentProxy}")
    api("com.nhaarman:mockito-kotlin:1.6.0")
    api("mysql:mysql-connector-java:8.0.28")
    api("commons-io:commons-io:2.11.0")
    api("io.grpc:grpc-protobuf:1.53.0")
    api("com.google.guava:guava:33.0.0-jre")
    api("org.eclipse.jetty:jetty-http:11.0.16")
    api("org.eclipse.jetty.http2:http2:11.0.16")
    api("org.jooq:jooq:${versions.jooq}")
    api("org.eclipse.jgit:org.eclipse.jgit:6.6.1.202309021850-r")
    api("ch.qos.logback:logback-classic:1.4.14")
    api("ch.qos.logback:logback-core:1.4.14")
    api("io.projectreactor.netty:reactor-netty-http:1.1.13")
    api("com.jayway.jsonpath:json-path:2.9.0")
    api("org.springframework:spring-webmvc:6.0.14")
    api("org.springdoc:springdoc-openapi-starter-webmvc-ui:${versions.springdocVersion}")
    api("org.quartz-scheduler:quartz:2.5.0-rc1")
  }
}
