name:  kork publish and Build All including Halyard
on:
  workflow_call:
  push:
    branches:
    - OES-1.30.x-master-adhoc 
env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx6g -Xms6g
  CONTAINER_REGISTRY: quay.io/opsmxpublic
  
jobs:
  publish-kork:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Build
        env:
          NEXUS_VERSION: 1-0-SNAPSHOT
        run: |
          
              cat <<EOF>> patch
              
              version = "$NEXUS_VERSION"
              group = 'io.spinnaker.kork'
              apply plugin: 'maven-publish'

              publishing{
                   publications{
                       maven(MavenPublication){
                            groupId = 'io.spinnaker.kork'
                            artifactId = 'NEXUSARTIID'
                            version = "$NEXUS_VERSION"
                            from components.java
                 pom {
                   name = 'NEXUSARTIID'
                   description = 'A description of my library'
                   }
                 }
              }

              repositories {
                 maven{
                 name = 'nexus'
                 url "https://nexus.opsmx.net/repository/maven-snapshots/"
                  credentials {
                    username = "${{ secrets.NEXUS_USERNAME }}"
                    password = "${{ secrets.NEXUS_PASSWORD }}"
                         }
                     }
                }
               }  
                               tasks.withType(GenerateModuleMetadata).configureEach {
                      suppressedValidationErrors.add('enforced-platform')
                }

              EOF
             
              ls -d */  | grep -v  "gradle" | sed 's/\///g' > ds.txt
              
              cat ds.txt

              for i in $(cat ds.txt) 
              do
               sed  s/NEXUSARTIID/$i/g patch > patchnew
               cat patchnew >> $i/$i.gradle
               
               #cat $i/$i.gradle
         
              done
             
              sed -e '/components\.java/ s/^#*/\/\//' -i kork-bom/kork-bom.gradle
              sed -e '/components\.java/ s/^#*/\/\//' -i spinnaker-dependencies/spinnaker-dependencies.gradle
          
                 echo "checking -----------------------"
              ./gradlew --no-daemon -PenableCrossCompilerPlugin=true  publish -x test
                           
  publish-fiat:
    runs-on: ubuntu-latest
    needs: [publish-kork]
    steps:
      - name: Checkout OpsMx Fiat repo
        uses: actions/checkout@v2
        with:
         repository: opsmx/fiat-oes
         ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Build
        env:
          NEXUS_VERSION: 1-0-SNAPSHOT
        run: |
            
              cat <<EOF>> patch
              
              version = "$NEXUS_VERSION"
              group = 'io.spinnaker.fiat'
              apply plugin: 'maven-publish'

              publishing{
                   publications{
                       maven(MavenPublication){
                            groupId = 'io.spinnaker.fiat'
                            artifactId = 'NEXUSARTIID'
                            version = "$NEXUS_VERSION"
                            from components.java
                 pom {
                   name = 'NEXUSARTIID'
                   description = 'A description of my library'
                   }
                 }
              }

              repositories {
                 maven{
                 name = 'nexus'
                 url "https://nexus.opsmx.net/repository/maven-snapshots/"
                  credentials {
                    username = "${{ secrets.NEXUS_USERNAME }}"
                    password = "${{ secrets.NEXUS_PASSWORD }}"
                         }
                     }
                }
               }  
                               tasks.withType(GenerateModuleMetadata).configureEach {
                                         suppressedValidationErrors.add('enforced-platform')
                                       }

              EOF
             
              ls -d */  | grep "fiat" | sed 's/\///g' > ds.txt
              
              cat ds.txt
              

              for i in $(cat ds.txt) 
              do
               sed  s/NEXUSARTIID/$i/g patch > patchnew
               cat patchnew >> $i/$i.gradle
             
              done
               sed -e '/components\.java/ s/^#*/\/\//' -i fiat-bom/fiat-bom.gradle
              ./gradlew --no-daemon -PenableCrossCompilerPlugin=true  publish -x test
              
              
  publish-clouddriver:
    runs-on: ubuntu-latest
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
         repository: opsmx/clouddriver-oes
         ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Build
        env:
          NEXUS_VERSION: 1-0-SNAPSHOT
        run: |
            
              cat <<EOF>> patch
              
              version = "$NEXUS_VERSION"
              group = 'io.spinnaker.clouddriver'
              apply plugin: 'maven-publish'

              publishing{
                   publications{
                       maven(MavenPublication){
                            groupId = 'io.spinnaker.clouddriver'
                            artifactId = 'NEXUSARTIID'
                            version = "$NEXUS_VERSION"
                            from components.java
                 pom {
                   name = 'NEXUSARTIID'
                   description = 'A description of my library'
                   }
                 }
              }

              repositories {
                 maven{
                 name = 'nexus'
                 url "https://nexus.opsmx.net/repository/maven-snapshots/"
                  credentials {
                    username = "${{ secrets.NEXUS_USERNAME }}"
                    password = "${{ secrets.NEXUS_PASSWORD }}"
                         }
                     }
                }
               }  
                               tasks.withType(GenerateModuleMetadata).configureEach {
                                         suppressedValidationErrors.add('enforced-platform')
                                       }

              EOF
             
              ls -d */  | grep "clouddriver" | sed 's/\///g' > ds.txt
              
              #cat ds.txt
              
              for i in $(cat ds.txt) 
              do
               sed  s/NEXUSARTIID/$i/g patch > patchnew
               cat patchnew >> $i/$i.gradle
             
              done
             
              ls -l cats/ | grep '^d' | awk '{print $9}' > ds.txt

              for i in $(cat ds.txt) 
              do
               sed  s/NEXUSARTIID/$i/g patch > patchnew
               cat patchnew >> cats/$i/$i.gradle
             
              done
              sed -e '/components\.java/ s/^#*/\/\//' -i clouddriver-bom/clouddriver-bom.gradle
          
              ./gradlew --no-daemon -PenableCrossCompilerPlugin=true  publish -x test
                
  publish-front50:
    runs-on: ubuntu-latest
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
         repository: opsmx/front50-oes
         ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Build
        env:
          NEXUS_VERSION: 1-0-SNAPSHOT
        run: |
            
              cat <<EOF>> patch
              
              version = "$NEXUS_VERSION"
              group = 'io.spinnaker.front50'
              apply plugin: 'maven-publish'

              publishing{
                   publications{
                       maven(MavenPublication){
                            groupId = 'io.spinnaker.front50'
                            artifactId = 'NEXUSARTIID'
                            version = "$NEXUS_VERSION"
                            from components.java
                 pom {
                   name = 'NEXUSARTIID'
                   description = 'A description of my library'
                   }
                 }
              }

              repositories {
                 maven{
                 name = 'nexus'
                 url "https://nexus.opsmx.net/repository/maven-snapshots/"
                  credentials {
                    username = "${{ secrets.NEXUS_USERNAME }}"
                    password = "${{ secrets.NEXUS_PASSWORD }}"
                         }
                     }
                }
               }  
                               tasks.withType(GenerateModuleMetadata).configureEach {
                                         suppressedValidationErrors.add('enforced-platform')
                                       }

              EOF
             
              ls -d */  | grep "front50" | sed 's/\///g' > ds.txt
              
              cat ds.txt
              

              for i in $(cat ds.txt) 
              do
               sed  s/NEXUSARTIID/$i/g patch > patchnew
               cat patchnew >> $i/$i.gradle
             
              done
             
              sed -e '/components\.java/ s/^#*/\/\//' -i front50-bom/front50-bom.gradle
          
                ./gradlew --no-daemon -PenableCrossCompilerPlugin=true  publish -x test               
 
  publish-orca:
    runs-on: ubuntu-latest
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2        
        with:
          repository: opsmx/orca-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Build
        env:
          NEXUS_VERSION: 2-0-SNAPSHOT
        run: |
            
              cat <<EOF>> patch
              
              version = "$NEXUS_VERSION"
              group = 'io.spinnaker.orca'
              apply plugin: 'maven-publish'

              publishing{
                   publications{
                       maven(MavenPublication){
                            groupId = 'io.spinnaker.orca'
                            artifactId = 'NEXUSARTIID'
                            version = "$NEXUS_VERSION"
                            from components.java
                 pom {
                   name = 'NEXUSARTIID'
                   description = 'A description of my library'
                   }
                 }
              }

              repositories {
                 maven{
                 name = 'nexus'
                 url "https://nexus.opsmx.net/repository/maven-snapshots/"
                  credentials {
                    username = "${{ secrets.NEXUS_USERNAME }}"
                    password = "${{ secrets.NEXUS_PASSWORD }}"
                         }
                     }
                }
               }  
                               tasks.withType(GenerateModuleMetadata).configureEach {
                                         suppressedValidationErrors.add('enforced-platform')
                                       }

              EOF
             
              ls -d */  | grep "orca\|keiko" | sed 's/\///g' > ds.txt
              
              for i in $(cat ds.txt) 
              do
               sed  s/NEXUSARTIID/$i/g patch > patchnew
               cat patchnew >> $i/$i.gradle
             
              done
             
              sed -e '/components\.java/ s/^#*/\/\//' -i orca-bom/orca-bom.gradle
          
                ./gradlew --no-daemon -PenableCrossCompilerPlugin=true  publish -x test

  clouddriver-build-push:
    runs-on: ubuntu-latest
    outputs:
      clouddriver: ${{ steps.get-img-name.outputs.clouddriver }}
      clouddriver-dev: ${{ steps.get-img-name.outputs.clouddriver-dev }}
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/clouddriver-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-clouddriver-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: |
     
          ./gradlew --no-daemon -PenableCrossCompilerPlugin=true clouddriver-web:installDist -x test 
                        
            extra_opts='"-Djava.security.egd=file:/dev/./urandom" "-Dspring.config.import=optional:/opt/spinnaker/config/" "--add-opens=java.base/sun.net=ALL-UNNAMED" "--add-exports=java.base/sun.net=ALL-UNNAMED" "--add-opens=java.base/java.time=ALL-UNNAMED" "--add-exports=java.base/sun.security.rsa=ALL-UNNAMED" "--add-exports=java.base/sun.security.pkcs=ALL-UNNAMED" "--add-exports=java.base/sun.security.x509=ALL-UNNAMED"'
            
            extra_opts_escaped=$(sed 's/[\/&]/\\&/g' <<< "$extra_opts")
              
            sed "s/^\(DEFAULT_JVM_OPTS\)\s*=\s*'.*'\$/\1='$extra_opts_escaped'/"  -i clouddriver-web/build/install/clouddriver/bin/clouddriver
                              
      - name: dockerBuildpush
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            TARGETARCH=amd64
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
      - name: dockerBuildpushjaeger      
        id: docker_build-dev
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            TARGETARCH=amd64
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags:  "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"          
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "clouddriver=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "clouddriver-dev=$devimageName" >> $GITHUB_OUTPUT

  deck-build-push:
    runs-on: ubuntu-latest
    outputs:
      deck: ${{ steps.get-img-name.outputs.deck }}
      deck-dev: ${{ steps.get-img-name.outputs.deck-dev }}    
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/deck-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-deck-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run:  |
               cp docker/ubi8/setupapache2.sh docker/setup-apache2.sh
               cp docker/ubi8/runapache2.sh docker/run-apache2.sh
    
               # To remove Special characters
                sed -i 's/\r//' docker/setup-apache2.sh
                sed -i 's/\r//' docker/run-apache2.sh
              
               ./gradlew build --no-daemon -PskipTests 
      - name: dockerBuildpush
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "deck=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "deck-dev=$devimageName" >> $GITHUB_OUTPUT
             
  echo-build-push:
    runs-on: ubuntu-latest
    outputs:
      echo: ${{ steps.get-img-name.outputs.echo }}
      echo-dev: ${{ steps.get-img-name.outputs.echo-dev }}    
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/echo-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-echo-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true echo-web:installDist -x test 

      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"
      - name: dockerBuildpushdev
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"                
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "echo=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "echo-dev=$devimageName" >> $GITHUB_OUTPUT
             
  fiat-build-push:
    runs-on: ubuntu-latest
    outputs:
      fiat: ${{ steps.get-img-name.outputs.fiat }}
      fiat-dev: ${{ steps.get-img-name.outputs.fiat-dev }}    
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/fiat-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-fiat-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true fiat-web:installDist -x test 
      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}" 
      - name: dockerBuildpushjaeger
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"   
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "fiat=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "fiat-dev=$devimageName" >> $GITHUB_OUTPUT
  front50-build-push:
    runs-on: ubuntu-latest
    outputs:
      front50: ${{ steps.get-img-name.outputs.front50 }}
      front50-dev: ${{ steps.get-img-name.outputs.front50-dev }}    
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/front50-oes
          ref: refs/heads/OES-1.30.1  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-front50-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-build-cache --no-daemon -PenableCrossCompilerPlugin=true front50-web:installDist -x test 
      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}" 
      - name: dockerBuildpushjaeger
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"  
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "front50=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "front50-dev=$devimageName" >> $GITHUB_OUTPUT

  gate-build-push:
    runs-on: ubuntu-latest
    outputs:
      gate: ${{ steps.get-img-name.outputs.gate }}
      gate-dev: ${{ steps.get-img-name.outputs.gate-dev }}    
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2        
        with:
          repository: opsmx/gate-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo Build number is ${{ github.run_number }}
          
           echo git tag is ${GITHUB_REF#refs/*/}
          echo ::set-output name=REPO::ubi8-gate-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true gate-web:installDist -x test 
      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            CUSTOMPLUGIN_RELEASEVERSION=v4.0.3.2-rc1
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}" 
      - name: dockerBuildpushdev
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            CUSTOMPLUGIN_RELEASEVERSION=v4.0.3.2-rc1
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "gate=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "gate-dev=$devimageName" >> $GITHUB_OUTPUT   
   
  igor-build-push:
    runs-on: ubuntu-latest
    outputs:
      igor: ${{ steps.get-img-name.outputs.igor }}
      igor-dev: ${{ steps.get-img-name.outputs.igor-dev }}    
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/igor-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-igor-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: |
        
            ./gradlew --no-daemon -PenableCrossCompilerPlugin=true igor-web:installDist -x test 
            
            extra_opts='"-Djava.security.egd=file:/dev/./urandom" "-Dspring.config.import=optional:/opt/spinnaker/config/" "--add-opens=java.base/sun.net=ALL-UNNAMED" "--add-exports=java.base/sun.net=ALL-UNNAMED" "--add-opens=java.base/java.time=ALL-UNNAMED"'

            extra_opts_escaped=$(sed 's/[\/&]/\\&/g' <<< "$extra_opts")
                      
            sed "s/^\(DEFAULT_JVM_OPTS\)\s*=\s*'.*'\$/\1='$extra_opts_escaped'/" -i  igor-web/build/install/igor/bin/igor 

            #cat igor-web/build/install/igor/bin/igor              
      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}" 
      - name: dockerBuildpushdev
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"                    
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "igor=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "igor-dev=$devimageName" >> $GITHUB_OUTPUT
             
  kayenta-build-push:
    runs-on: ubuntu-latest
    outputs:
      kayenta: ${{ steps.get-img-name.outputs.kayenta }}
      kayenta-dev: ${{ steps.get-img-name.outputs.kayenta-dev }}  
    needs: [publish-orca]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/kayenta-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-kayenta-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true kayenta-web:installDist -x test 

      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"        
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "kayenta=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $devimageName
             echo "kayenta-dev=$devimageName" >> $GITHUB_OUTPUT 
             
  orca-build-push:
    runs-on: ubuntu-latest
    outputs:
      orca: ${{ steps.get-img-name.outputs.orca }}
      orca-dev: ${{ steps.get-img-name.outputs.orca-dev }}
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/orca-oes
          ref: refs/heads/OES-1.30.1    
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-orca-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-build-cache --no-daemon -PenableCrossCompilerPlugin=true orca-web:installDist -x test 

      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}" 
      - name: dockerBuildpushjaeger
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"    
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "orca=$imageName" >> $GITHUB_OUTPUT
            
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "orca-dev=$devimageName" >> $GITHUB_OUTPUT          
  
  rosco-build-push:
    runs-on: ubuntu-latest
    outputs:
      rosco: ${{ steps.get-img-name.outputs.rosco }}
      rosco-dev: ${{ steps.get-img-name.outputs.rosco-dev }}
    needs: [publish-fiat]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/rosco-oes
          ref: refs/heads/OES-1.30.1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-rosco-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true rosco-web:installDist -x test 
      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}" 
      - name: dockerBuildpushdev
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-dev
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev"   
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "rosco=$imageName" >> $GITHUB_OUTPUT
             
           devimageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}-dev
             echo $devimageName
             echo "rosco-dev=$devimageName" >> $GITHUB_OUTPUT

  halyard-build-push:
    runs-on: ubuntu-latest
    outputs:
      halyard: ${{ steps.get-img-name.outputs.halyard }}
    needs: [publish-front50,publish-clouddriver]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: opsmx/halyard-oes
          ref: refs/heads/OES-1.30.x-master-adhoc
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Prepare build variables
        id: build_variables
        run: |
          echo ::set-output name=REPO::ubi8-halyard-cve
          echo ::set-output name=VERSION::"$(git rev-parse --short HEAD)-$(date --utc +'%Y%m%d%H%M')"
      - name: Login to Quay
        uses: docker/login-action@v1
        # use service account flow defined at: https://github.com/docker/login-action#service-account-based-authentication-1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_KEY }}
      - name: Build
        env:
          ORG_GRADLE_PROJECT_version: ${{ steps.build_variables.outputs.VERSION }}
        run: ./gradlew --no-daemon -PenableCrossCompilerPlugin=true halyard-web:installDist -x test 
      - name: dockerBuildpush
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/ubi8/Dockerfile-fips
          push: true
          tags: |
            "${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}"     
      - name: Get the image name
        id: get-img-name  
        run: |
           imageName=${{ env.CONTAINER_REGISTRY }}/${{ steps.build_variables.outputs.REPO }}:${{ steps.build_variables.outputs.VERSION }}
             echo $imageName
             echo "halyard=$imageName" >> $GITHUB_OUTPUT
                     
  outputs:
    runs-on: ubuntu-latest
    needs: [clouddriver-build-push,deck-build-push,echo-build-push,fiat-build-push,front50-build-push,gate-build-push,igor-build-push,kayenta-build-push,orca-build-push,rosco-build-push,halyard-build-push]
    if: always()
    steps:
    - name: Check out Repository
      uses: actions/checkout@v3
    - name: Get Images List
      run: | 
         echo "--------------------Fips Docker Imgaes----------------" 

        
           echo ${{ needs.clouddriver-build-push.outputs.clouddriver }}
           echo ${{ needs.deck-build-push.outputs.deck }} 
           echo ${{ needs.echo-build-push.outputs.echo }} 
           echo ${{ needs.fiat-build-push.outputs.fiat }} 
           echo ${{ needs.front50-build-push.outputs.front50 }} 
           echo ${{ needs.gate-build-push.outputs.gate }} 
           echo ${{ needs.igor-build-push.outputs.igor }} 
           echo ${{ needs.kayenta-build-push.outputs.kayenta }} 
           echo ${{ needs.orca-build-push.outputs.orca }} 
           echo ${{ needs.rosco-build-push.outputs.rosco }} 
           echo ${{ needs.halyard-build-push.outputs.halyard }} 

           
           echo "--------------------Dev Docker Imgaes----------------" 
           
           echo ${{ needs.clouddriver-build-push.outputs.clouddriver-dev }}
           echo ${{ needs.deck-build-push.outputs.deck }} 
           echo ${{ needs.echo-build-push.outputs.echo-dev }} 
           echo ${{ needs.fiat-build-push.outputs.fiat-dev }} 
           echo ${{ needs.front50-build-push.outputs.front50-dev }} 
           echo ${{ needs.gate-build-push.outputs.gate-dev }} 
           echo ${{ needs.igor-build-push.outputs.igor-dev }} 
           echo ${{ needs.kayenta-build-push.outputs.kayenta }} 
           echo ${{ needs.orca-build-push.outputs.orca-dev}} 
           echo ${{ needs.rosco-build-push.outputs.rosco-dev }} 
           echo ${{ needs.halyard-build-push.outputs.halyard }} 
         
